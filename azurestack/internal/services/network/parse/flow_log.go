package parse

import (
	"fmt"
	"strings"
)

type FlowLogId struct {
	SubscriptionId     string
	ResourceGroupName  string
	NetworkWatcherName string
	nsgId              NetworkSecurityGroupId
}

func NewFlowLogID(subscriptionId, resourceGroup, networkWatcherName string, nsgId NetworkSecurityGroupId) FlowLogId {
	return FlowLogId{
		SubscriptionId:     subscriptionId,
		ResourceGroupName:  resourceGroup,
		NetworkWatcherName: networkWatcherName,
		nsgId:              nsgId,
	}
}

func (id FlowLogId) String() string {
	segments := []string{
		fmt.Sprintf("Name %q", id.Name()),
		fmt.Sprintf("Network Watcher Name %q", id.NetworkWatcherName),
		fmt.Sprintf("Resource Group %q", id.ResourceGroupName),
	}
	segmentsStr := strings.Join(segments, " / ")
	return fmt.Sprintf("%s: (%s)", "Flow Log", segmentsStr)
}

func (id FlowLogId) ID() string {
	fmtString := "/subscriptions/%s/resourceGroups/%s/providers/Microsoft.Network/networkWatchers/%s/networkSecurityGroupId" + "%s"
	return fmt.Sprintf(fmtString, id.SubscriptionId, id.ResourceGroupName, id.NetworkWatcherName, id.nsgId.ID())
}

func (id FlowLogId) Name() string {
	// The flow log name generated by the "configureFlowLog" endpoint is in below format:
	// Microsoft.Network{nsg rg name}{nsg name}
	// We follow this rule to ensure backward compatibility.
	return fmt.Sprintf("Microsoft.Network%s%s", id.nsgId.ResourceGroup, id.nsgId.Name)
}

func (id FlowLogId) NetworkSecurityGroupID() string {
	return id.nsgId.ID()
}

func FlowLogID(id string) (*FlowLogId, error) {
	parts := strings.Split(id, "/networkSecurityGroupId")
	if len(parts) != 2 {
		return nil, fmt.Errorf("Error: Network Watcher Flow Log ID could not be split on `/networkSecurityGroupId`: %s", id)
	}

	watcherId, err := NetworkWatcherID(parts[0])
	if err != nil {
		return nil, err
	}

	nsgId, err := NetworkSecurityGroupID(parts[1])
	if err != nil {
		return nil, fmt.Errorf("parsing the networkSecurityGroupId inside the Network Watcher Flow Log ID: %v", err)
	}

	return &FlowLogId{
		SubscriptionId:     watcherId.SubscriptionId,
		ResourceGroupName:  watcherId.ResourceGroup,
		NetworkWatcherName: watcherId.Name,
		nsgId:              *nsgId,
	}, nil
}
